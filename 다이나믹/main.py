# 다이나믹 프로그래밍은 문제가 다음의 조건을 만족할 때 사용할 수 있다.

# 1. 최적 부분 구조 (Optimal Substrcture)
    # 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있습니다.
# 2. 중복되는 부분 문제 (Overlapping Subproblem)
    # 동일한 작은 문제를 반복적으로 해결해야 합니다.

# 보텀업 (상향식) 아래쪽에서 작은 문제를 해결해서 결과값을 이용해서 다음의 준제까지 차례대로 해결

# 2가지 기법
# 1. 메모이제이션 (Memoization) 탑다운 (하향식) => 재귀함수 사용 큰 문제를 해결하기 위해 작은 문제를 재귀적으로 부른다.
    # 메모이제이션은 다이나믹 프로그래밍을 구현하는 방법 중 하나입니다.
    # 한 번 계산한 결과를 메모리 공간에 메모하는 기법입니다.
    # 값을 기록해 놓는다는 점에서 캐싱이라고도 한다.

# 일반 다이나믹 프로그래밍
def fibo(x):


    if x == 1 or x == 2:
        return 1
    tmp = fibo(x-1) + fibo(x-2)
    return tmp

print(fibo(5))


# 탑다운 다이나믹 프로그래밍
d = [0] * 100
def fib(x):
    if x == 1 or x == 2:
        return 1
    if d[x] != 0:
        return d[x]
    d[x] = fib(x-1) + fib(x-2)
    return d[x]
print(fib(99))

# 바텀업 다이나믹 프로그래밍
d = [0] * 100
d[1] = 1
d[2] = 1
n = 99
for i in range(3, n+1):
    d[i] = d[i - 1] + d[i -2]

print(d[n])